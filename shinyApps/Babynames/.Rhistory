source('babynames_server.R')
# source all modules
invisible(sapply(paste0('Modules/', list.files('Modules')), source))
shinyApp(ui, server)
source('babynames_ui.R')
source('babynames_server.R')
# source all modules
invisible(sapply(paste0('Modules/', list.files('Modules')), source))
shinyApp(ui, server)
# source all modules
invisible(sapply(paste0('Modules/', list.files('Modules')), source))
runApp('Global.R')
runApp('Global.R')
# source all modules
sourceDirectory('Modules')
library(R.utils)
# source all modules
sourceDirectory('Modules')
library(shiny); runApp('Global.R')
###################
# app.R
#
# Main controller.
# Used to import your serverui and server components, and initialize the app.
###################
library(shiny)
library(shinydashboard)
source('./ui.R')
runApp('C:/Users/jmeyer/Dashboards/ContactRateDashboard')
install.packages('babynames')
?babynames
applicants
library(babynames)
applicants
births
97605+118400\
97605+118400
applicants %>% filter(year > 1909)
applicants %>% filter(year >= 1909)
applicants\
applicants
applicants %>% filter(year >= 1909)
births
368096+176867
lifetables
babynames
lifetables %>% filter(x=24)
lifetables %>% filter(x==24)
applicants
?babynames
merge(applicants, births, by=c(year, sex))
births
applicants %>% group_by(year) %>% summarise(sum(n_all))
applicants %>% group_by(year) %>% summarise('SSA'=sum(n_all))
merge(applicants %>% group_by(year) %>% summarise('SSA'=sum(n_all)), births, by=year)
SSA <- applicants %>% group_by(year) %>% summarise('SSA'=sum(n_all))
SSA
merge(SSA, births)
merge(SSA, births, all=TRUE)
merge(SSA, births, all=TRUE)
f = merge(SSA, births, all=TRUE)
f
f %>% mutate(prop = SSA/births)
runApp()
lifetables
lifetables %>% filter(year >=2010)
lifetables %>% filter(year >=2015)
lifetables %>% filter(year >=2010, x=15, sex='M'
lifetables %>% filter(year >=2010, x=15, sex='M')
lifetables %>% filter(year >=2010, x==15, sex=='M')
lifetables %>% filter(year >=2010, x==65, sex=='M')
lifetables %>% filter(year >=2010, x==75, sex=='M')
lifetables %>% filter(year >=2010, x==85, sex=='M')
lifetables %>% filter(year >=2010, x==95, sex=='M')
lifetables %>% filter(year >=2010, x==105, sex=='M')
lifetables %>% filter(year >=2010, x==115, sex=='M')
lifetables %>% filter(year >=2010, x %% 5 == 0, sex=='M')
lifetables %>% filter(year >=2010, x %% 15 == 0, sex=='M')
87/97901
rm(list=ls())
runApp()
# source all modules
sourceDirectory('Modules')
# source all modules
sourceDirectory('Modules')
runApp()
rm(list=ls())
# source all modules
sourceDirectory('Modules')
# source all modules
sourceDirectory('Modules/')
?sourceDirectory
getwd()
list.files
list.files()
parent.frame()
# source all modules
sourceDirectory('Modules/', verbouse=TRUE)
# source all modules
sourceDirectory(getwd(), verbouse=TRUE)
# source all modules
sourceDirectory(getwd(), verbose=TRUE)
# source all modules
sourceDirectory('Modules/'), verbose=TRUE)
# source all modules
sourceDirectory('Modules/', verbose=TRUE)
?source
source('Modules/mod_name_analysis_ui.R')
# source all modules
sourceDirectory('Modules/')
runApp()
# source all modules
sapply(paste0('Modules/', list.files('Modules')), source)
# source all modules
sapply(paste0('Modules/', list.files('Modules')), source)
rm(list=ls())
# source all modules
sapply(paste0('Modules/', list.files('Modules')), source)
# source all modules
invisible(sapply(paste0('Modules/', list.files('Modules')), source))
runApp()
rm(list=ls())
runApp()
detach("package:babynames", unload = TRUE)
library(babynames)
runApp()
babynames$prop
head(babynames)
runApp()
babynames::babynames$prop
babynames <- babynames::babynames
runApp()
runApp()
rm(list=ls())
runApp()
rm(list = ls(all = TRUE))
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
?fluidpage
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(babynames)
babynames::births
applicants
babynames %>% filter(name=='John', year==1880)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
babynames::applicants
runApp()
runApp()
graph.dat()
stat.dat()
runApp()
runApp()
stat.dat()
stat.dat
stat.dat()
runApp()
stat.dat()
length(input$sex)
input$sex
runApp()
stat,dat()
stat.dat()
graph.dat()
graph.dat() %>% group_by(year, name) %>% summarise(n=sum(n))
pop_totals() %>% group_by(year, name) %>% summarise(nBabies = sum(pop))
pop_totals() %>% group_by(year, name)
pop_totals()
aapapplicants
apapplicants
applicants
cbind(applicants, pop_totals())
runApp()
runApp()
pop_totals
pop_totals()
applicants
applicants
births
pop_totals
pop_totals()
applicants
applicants$n_all == pop_totals()$ss.pop
cbind(applicants$n_all,pop_totals()$ss.pop)
runApp()
pop_totals
pop_totals()
graph.dat() %>% group_by(year, name) %>% summarise(n=sum(n))
pop_totals() %>% group_by(year, name) %>% summarise(nBabies = sum(ss.pop))
pop_totals() %>% group_by(year, name)
pop_totals
pop_totals()
runApp()
runApp()
pop_totals()
stat.dat()
graph.dat() %>% group_by(year, name) %>% summarise(n=sum(n))
graph.dat() %>% group_by(year, name) %>% summarise(n=sum(n))
pop_totals
pop_totals()
pop_totals() %>% group_by(year)
graph.dat() %>% group_by(year) %>% summarise(n=sum(n))
pop_totals() %>% group_by(year) %>% summarise(nBabies = sum(ss.tot))
merge(graph.dat() %>% group_by(year) %>% summarise(n=sum(n)),
pop_totals() %>% group_by(year) %>% summarise(ss.nBabies = sum(ss.tot)),
by=c('year'))
# pooled totals
return(
merge(graph.dat() %>% group_by(year) %>% summarise(n=sum(n)),
pop_totals() %>% group_by(year) %>% summarise(ss.nBabies = sum(ss.tot)),
by=c('year')) %>% transmute(year=year, prop=n/nBabies*100, n = nBabies, sex='both')
)
merge(graph.dat() %>% group_by(year) %>% summarise(n=sum(n)),
pop_totals() %>% group_by(year) %>% summarise(ss.nBabies = sum(ss.tot)),
by=c('year')) %>% transmute(year=year, prop=n/ss.nBabies*100, n = ss.nBabies, sex='both')
# pooled totals
return(
merge(graph.dat() %>% group_by(year) %>% summarise(n=sum(n)),
pop_totals() %>% group_by(year) %>% summarise(ss.nBabies = sum(ss.tot)),
by=c('year')) %>% transmute(year=year,sex=sel.sex(), prop=n/ss.nBabies*100, n = ss.nBabies)
)
# pooled totals
return(
merge(graph.dat() %>% group_by(year) %>% summarise(n=sum(n)),
pop_totals() %>% group_by(year) %>% summarise(ss.nBabies = sum(ss.tot)),
by=c('year')) %>% transmute(year=year, sex=input$sex, prop=n/ss.nBabies*100, n = ss.nBabies)
)
runApp()
pop_totals()
babynames %>%
group_by(year, sex) %>%
summarise(data.prop=sum(prop), data.tot = sum(n)) %>%
ungroup()
applicants
group_by(year, sex) %>%
summarise(data.prop=sum(prop), data.tot = sum(n)) %>%
ungroup() %>%
merge(applicants, by=c('year', 'sex'))
names(applicants)
babynames %>%
group_by(year, sex) %>%
summarise(data.prop=sum(prop), data.tot = sum(n)) %>%
ungroup() %>%
merge(applicants, by=c('year', 'sex'))
?merge
babynames %>%
group_by(year, sex) %>%
summarise(data.prop=sum(prop), data.tot = sum(n)) %>%
ungroup() %>%
merge(applicants, by=c('year', 'sex'), all=TRUE)
babynames %>%
group_by(year, sex) %>%
summarise(data.prop=sum(prop), data.tot = sum(n)) %>%
ungroup() %>%
merge(applicants, by=c('year', 'sex'), all=TRUE) %>%
rename('n_all'='ss.tot')
babynames %>%
group_by(year, sex) %>%
summarise(data.prop=sum(prop), data.tot = sum(n)) %>%
ungroup() %>%
merge(applicants, by=c('year', 'sex'), all=TRUE) %>%
rename('ss.tot'='n_all')
merge(graph.dat() %>% group_by(year) %>% summarise(n=sum(n)),
pop_totals() %>% group_by(year) %>% summarise(ss.nBabies = sum(ss.tot)),
by=c('year')) %>% transmute(year=year, sex=input$sex, prop=n/ss.nBabies*100, n = ss.nBabies)
runApp()
runApp()
stat.dat()
pop_totals()
graph.dat() %>% group_by(year) %>% summarise(n=sum(n))
graph.dat() %>% group_by(year) %>% summarise(n=sum(n))
pop_totals_MF() %>% group_by(year) %>% summarise(ss.nBabies = sum(ss.tot))
pop_totals() %>% group_by(year) %>% summarise(ss.nBabies = sum(ss.tot))
births
merge(pop_totals() %>% group_by(year) %>% summarise(ss.nBabies = sum(ss.tot)),
births, by='year', all=TRUE)
graph.dat() %>% group_by(year) %>% summarise(n=sum(n))
merge(graph.dat() %>% group_by(year) %>% summarise(n=sum(n)),
pop_totals_both(),
by=c('year'))
runApp()
runApp()
stat.dat()
graph.dat() %>% group_by(year) %>% summarise(n=sum(n))
pop_totals_both()
merge(graph.dat() %>% group_by(year) %>% summarise(n=sum(n)),
pop_totals_both(),
by=c('year'))
merge(graph.dat() %>% group_by(year) %>% summarise(n=sum(n)),
pop_totals_both(),
by=c('year'))
runApp()
stat.dat()
runApp()
stat.dat()
head(babynames)
stat.dat()
allranks()
allRanks()
dat.beforeRank()
dat.beforeRank() %>%
group_by(name, year)
dat.beforeRank() %>%
group_by(name, year) %>%
summarise(n = sum(n))
dat.beforeRank() %>%
group_by(name, year) %>%
summarise(n = sum(n)) %>%
group_by(year) %>%
mutate(ranks = rank(-n, ties.method='first')) %>%
ungroup()
nameRanks()
babynames %>% filter(year==1880) %>% group_by(name) %>% summarise(r=sum(n)) %>% arrange(desc(r))
babynames %>% filter(year==1885) %>% group_by(name) %>% summarise(r=sum(n)) %>% arrange(desc(r))
babynames %>% filter(year==1887) %>% group_by(name) %>% summarise(r=sum(n)) %>% arrange(desc(r))
runApp()
runApp()
runApp()
stat.dat()
runApp()
runApp()
stat.dat()
runApp()
stat.dat()
nameRanks()
stat.dat() %>%
merge(nameRanks() %>% select(year, ranks), by='year') %>%
arrange(desc(year))
pop_totals_both()
runApp()
runApp()
runApp()
runApp()
runApp()
?validate
runApp()
runApp()
runApp()
shiny::runApp()
?&
?formatPercentage
runApp()
runApp()
runApp()
allRanks()
dat.beforeRank()
nameRanks()
all_ranks()
allRanks()
runApp()
runApp()
runApp()
shiny::runApp()
babynames::lifetables
babynames::lifetables %>% filter(age ==115)
babynames::lifetables %>% filter(x ==115)
babynames::lifetables %>% filter(x ==115) %>% filter(year > 1950)
babynames::lifetables %>% filter(x ==14) %>% filter(year > 1950)
shiny::runApp()
runApp()
input$pooled
inut$sex
input$sex
input$pooled
?shiny::validate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
format.perc <- function(num, ndig=2, isPerc=FALSE){
paste0(format(round(num*ifelse(isPerc, 1, 100),2), nsmall = 2), '%')
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat.beforeRank()
graph.dat()
nrow(graph.dat())
runApp()
runApp()
runApp()
runApp()
runApp()
?shiny::box
?bocx
?box
runApp()
?textInput
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?shiny::box
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
babynames %>% select(distinct(names))
babynames %>% select(name)
babynames %>% select(name) %>% unique()
names = babynames %>% select(name) %>% unique()
names %>% filter(name == 'McCall')
names %>% filter(name == 'Mccall')
(gregexpr("[A-Z]", 'A'))
unlist(gregexpr("[A-Z]", 'A'))
unlist(gregexpr("[A-Z]", 'Ab'))
unlist(gregexpr("[A-Z]", 'Name'))
unlist(gregexpr("[A-Z]", 'McCall'))
isUpper <- function(n) length(unlist(gregexpr("[A-Z]", name))) != 1
names
sapply(names, isUpper)
isUpper <- function(n) length(unlist(gregexpr("[A-Z]", n))) != 1
sapply(names, isUpper)
names
as.vector(names)
c(names)
nCaps <- sapply(c(names), isUpper)
nCaps
c(names)
c(names)[1]
nCaps <- sapply(unlist(c(names)), isUpper)
nCaps
sum(nCaps)
runApp()
graph.dat()
nameRanks()
runApp()
runApp()
runApp()
nameRanks()
allRanks()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages(c("babynames", "DT", "highcharter", "shiny", "shinydashboard", "shinyWidgets"))
install.packages(c("babynames", "DT", "highcharter", "shiny", "shinydashboard", "shinyWidgets"))
shiny::runApp()
choose(15,13)*choose(19,15)/choose(34,28)
choose(15,14)*choose(19,14)/choose(34,28)
choose(15,15)*choose(19,13)/choose(34,28)
.1297+.0201+.3026
sqrt(sum(1/c(55,129,7,61)))
522/19942
477*19942/(522*19934)
library(shiny)
runApp()
USArrests
