scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)')
# Plot 4: GAAP only CHOFF and both_choff over time
# Do you want this for the whole time period?
dat2 <- read.csv('~/Data/data2.csv')
dat2$date <- as.Date(dat2$Date, format='%m/%d/%Y')
df4 <- cbind.data.frame(dat2[,'date'],apply(dat2[,9:10], 2, function(x) as.numeric(sub('%','',x))))
colnames(df4) <- c('date', sub('.1','',colnames(df4)[-1]))
df4.melt <- melt(df4, id='date')
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)')
ggplot(dat1, aes(x = date, y = GAAPPerc)) +
geom_line(color=snap_green_med, size = 2) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
ylim(83,87.5) + ylab('GAAP (%)') + xlab("Date") +
theme(panel.background =  element_rect(fill = 'grey85'), panel.grid.minor = element_line(color = 'grey91'))
ggplot(dat1, aes(x = date, y = GAAPPerc)) +
geom_line(color=snap_green_med, size = 2) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
ylim(80,90) + ylab('GAAP (%)') + xlab("Date") +
theme(panel.background =  element_rect(fill = 'grey85'), panel.grid.minor = element_line(color = 'grey91'))
ggplot(dat1, aes(x = date, y = GAAPPerc)) +
geom_line(color=snap_green_med, size = 2) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
ylim(70,100) + ylab('GAAP (%)') + xlab("Date") +
theme(panel.background =  element_rect(fill = 'grey85'), panel.grid.minor = element_line(color = 'grey91'))
ggplot(dat1, aes(x = date, y = GAAPPerc)) +
geom_line(color=snap_green_med, size = 2) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
scale_y_continuous(breaks=seq(70,100,by=5), labels=seq(70,100,by=5))
seq(70,100,by=5)
sz <- 5
ols.line <- coef(lm(Operation ~ GAAP, data=dat1))
ggplot(dat1, aes(x=GAAP, y=Operation)) +
geom_abline(intercept=ols.line[1], slope=ols.line[2], lty=2, col='white') +
geom_point(size=sz, shape=15, col=snap_blue_light) + geom_point(size=sz, shape=0, col='black')  +
theme(panel.background =  element_rect(fill = snap_grey), panel.grid.minor=element_line(color=snap_grey_med)) +
scale_x_continuous(labels = scales::comma, breaks = seq(2e4,12e4,2e4), limits=c(2e4, 12e4)) +
scale_y_continuous(labels = scales::comma, breaks = seq(2e4,12e4,2e4), limits=c(2e4, 12e4))
df3 <- dat1[,c('date','GAAP', 'Operation')]
bars <- melt(df3, id.vars='date')
ggplot(bars, aes(fill=variable, y=value, x=date)) +
geom_bar(position="dodge", stat="identity") + scale_fill_manual(values=c(snap_green, snap_blue_med)) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y", expand=c(3e-2, 3e-2)) +
scale_y_continuous(limits=c(0, 130e3), expand=c(0,0), breaks = seq(0,150e3, 30e3)) +
theme(legend.title = element_blank(), panel.border = element_rect(colour = "black", fill=NA)) +
theme(axis.ticks.x = element_line(colour = "black", size = 1))
ggplot(bars, aes(fill=variable, y=value, x=date)) +
geom_bar(position="dodge", stat="identity") + scale_fill_manual(values=c(snap_green, snap_blue_med)) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y", expand=c(3e-2, 3e-2)) +
scale_y_continuous(limits=c(0, 130e3), expand=c(0,0), breaks = seq(0,150e3, 30e3)) +
#theme(legend.title = element_blank(), panel.border = element_rect(colour = "black", fill=NA)) +
theme(legend.title = element_blank()) +
theme(axis.ticks.x = element_line(colour = "black", size = 1))
ggplot(bars, aes(fill=variable, y=value, x=date)) +
geom_bar(position="dodge", stat="identity") + scale_fill_manual(values=c(snap_green, snap_blue_med)) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y", expand=c(3e-2, 3e-2)) +
scale_y_continuous(limits=c(0, 130e3), expand=c(0,0), breaks = seq(0,150e3, 30e3)) +
#theme(legend.title = element_blank(), panel.border = element_rect(colour = "black", fill=NA)) +
theme(legend.title = element_blank()) + scale_y_continuous(labels = scales::comma)
ggplot(bars, aes(fill=variable, y=value, x=date)) +
geom_bar(position="dodge", stat="identity") + scale_fill_manual(values=c(snap_green, snap_blue_med)) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y", expand=c(3e-2, 3e-2)) +
scale_y_continuous(limits=c(0, 130e3), expand=c(0,0), breaks = seq(0,150e3, 30e3), labels = scales::comma) +
#theme(legend.title = element_blank(), panel.border = element_rect(colour = "black", fill=NA)) +
theme(legend.title = element_blank())
# Plot 4: GAAP only CHOFF and both_choff over time
# Do you want this for the whole time period?
dat2 <- read.csv('~/Data/data2.csv')
dat2$date <- as.Date(dat2$Date, format='%m/%d/%Y')
df4 <- cbind.data.frame(dat2[,'date'],apply(dat2[,9:10], 2, function(x) as.numeric(sub('%','',x))))
colnames(df4) <- c('date', sub('.1','',colnames(df4)[-1]))
df4.melt <- melt(df4, id='date')
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)')
df4
df4 <- cbind.data.frame(dat2[,'date'],apply(dat2[,9:10], 2, function(x) as.numeric(sub('%','',x))))[1:17,]
colnames(df4) <- c('date', sub('.1','',colnames(df4)[-1]))
df4.melt <- melt(df4, id='date')
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)')
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)')
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor.x = element_line(linetype=2))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor.x = element_line(linetype=3))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor.x = element_line(linetype=4))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(linetype=4))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(linetype=5))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(linetype=6))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(linetype=2))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(linetype=1))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(linetype=3))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(linetype=4))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(linetype=2))
df3 <- dat1[,c('date','GAAP', 'Operation')]
bars <- melt(df3, id.vars='date')
ggplot(bars, aes(fill=variable, y=value, x=date)) +
geom_bar(position="dodge", stat="identity") + scale_fill_manual(values=c(snap_green, snap_blue_med)) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y", expand=c(3e-2, 3e-2)) +
scale_y_continuous(limits=c(0, 130e3), expand=c(0,0), breaks = seq(0,150e3, 30e3), labels = scales::comma) +
#theme(legend.title = element_blank(), panel.border = element_rect(colour = "black", fill=NA)) +
theme(legend.title = element_blank())
theme(axis.ticks.x = element_line(colour = "black", size = 1))
p2 <- ggplot(dat1, aes(x=GAAP, y=Operation)) +
geom_abline(intercept=ols.line[1], slope=ols.line[2], lty=2, col='white') +
geom_point(size=sz, shape=15, col=snap_blue_light) + geom_point(size=sz, shape=0, col='black')  +
theme(panel.background =  element_rect(fill = snap_grey), panel.grid.minor=element_line(color=snap_grey_med)) +
scale_x_continuous(labels = scales::comma, breaks = seq(2e4,12e4,2e4), limits=c(2e4, 12e4)) +
scale_y_continuous(labels = scales::comma, breaks = seq(2e4,12e4,2e4), limits=c(2e4, 12e4))
p_fixed <- set_panel_size(p2,width  = unit(10, "cm"), height = unit(10, "in"))
install.packages('egg')
p_fixed <- egg::set_panel_size(p2,width  = unit(10, "cm"), height = unit(10, "in"))
grid.newpage()
egg::grid.newpage()
grid.draw(p_fixed)
p_fixed
p2 <- ggplot(dat1, aes(x=GAAP, y=Operation)) +
geom_abline(intercept=ols.line[1], slope=ols.line[2], lty=2, col='white') +
geom_point(size=sz, shape=15, col=snap_blue_light) + geom_point(size=sz, shape=0, col='black')  +
theme(panel.background =  element_rect(fill = snap_grey), panel.grid.minor=element_line(color=snap_grey_med)) +
scale_x_continuous(labels = scales::comma, breaks = seq(2e4,12e4,2e4), limits=c(2e4, 12e4)) +
scale_y_continuous(labels = scales::comma, breaks = seq(2e4,12e4,2e4), limits=c(2e4, 12e4))
p_fixed <- egg::set_panel_size(p2, width  = unit(10, "cm"), height = unit(10, "cm"))
p_fixed
grid.draw(p_fixed)
# Plot 2: Scatterplot: GAAP -X vs OPeration-Y (NOT ONLY)
library(egg)
library(grid)
p_fixed <- egg::set_panel_size(p2, width  = unit(10, "cm"), height = unit(10, "cm"))
grid.draw(p_fixed)
grid.newpage()
grid.draw(p_fixed)
p_fixed <- egg::set_panel_size(p2, width  = unit(15, "cm"), height = unit(15, "cm"))
grid.newpage()
grid.draw(p_fixed)
dat1$GAAPPerc <- as.numeric(sub('%', ' ', dat1$Operation.GAAP))
dat1$date <- as.Date(dat1$date, format='%m/%d/%Y')
ggplot(dat1, aes(x = date, y = GAAPPerc)) +
geom_line(color=snap_green_med, size = 2) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
# scale_y_continuous(breaks=seq(70,100,by=5), labels=seq(70,100,by=5))
ylim(70,100) + ylab('GAAP (%)') + xlab("Date") +
theme(panel.background =  element_rect(fill = 'grey85'), panel.grid.minor = element_line(color = 'grey91'))
ggplot(dat1, aes(x = date, y = GAAPPerc)) +
geom_line(color=snap_green_med, size = 2) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
scale_y_continuous(breaks=seq(70,100,by=5), labels=seq(70,100,by=5)) +
ylim(70,100) + ylab('GAAP (%)') + xlab("Date") +
theme(panel.background =  element_rect(fill = 'grey85'), panel.grid.minor = element_line(color = 'grey91'))
ggplot(dat1, aes(x = date, y = GAAPPerc)) +
geom_line(color=snap_green_med, size = 2) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
scale_y_continuous(breaks=seq(70,100,by=5), labels=seq(70,100,by=5)) +
ylim(70,100) + ylab('GAAP (%)') + xlab("Date") +
theme(panel.background =  element_rect(fill = 'grey85'), panel.grid.minor = element_line(color = 'grey91'))
ggplot(dat1, aes(x = date, y = GAAPPerc)) +
geom_line(color=snap_green_med, size = 2) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
scale_y_continuous(breaks=seq(70,100,by=5), labels=seq(70,100,by=5)) +
ylab('GAAP (%)') + xlab("Date") +
theme(panel.background =  element_rect(fill = 'grey85'), panel.grid.minor = element_line(color = 'grey91'))
ggplot(dat1, aes(x = date, y = GAAPPerc)) +
geom_line(color=snap_green_med, size = 2) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
scale_y_continuous(breaks=seq(70,100,by=5), labels=seq(70,100,by=5), limits=c(70,100)) +
ylab('GAAP (%)') + xlab("Date") +
theme(panel.background =  element_rect(fill = 'grey85'), panel.grid.minor = element_line(color = 'grey91'))
dat1$GAAPPerc <- as.numeric(sub('%', ' ', dat1$Operation.GAAP))
dat1$date <- as.Date(dat1$date, format='%m/%d/%Y')
ggplot(dat1, aes(x = date, y = GAAPPerc)) +
geom_line(color=snap_green_med, size = 2) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y") +
scale_y_continuous(breaks=seq(70,100,by=5), labels=seq(70,100,by=5), limits=c(70,100)) +
ylab('GAAP (%)') + xlab("Date") +
theme(panel.background =  element_rect(fill = 'grey85'), panel.grid.minor = element_line(color = 'grey91'))
library(egg)
library(grid)
sz <- 5
ols.line <- coef(lm(Operation ~ GAAP, data=dat1))
p2 <- ggplot(dat1, aes(x=GAAP, y=Operation)) +
geom_abline(intercept=ols.line[1], slope=ols.line[2], lty=2, col='white') +
geom_point(size=sz, shape=15, col=snap_blue_light) + geom_point(size=sz, shape=0, col='black')  +
theme(panel.background =  element_rect(fill = snap_grey), panel.grid.minor=element_line(color=snap_grey_med)) +
scale_x_continuous(labels = scales::comma, breaks = seq(2e4,12e4,2e4), limits=c(2e4, 12e4)) +
scale_y_continuous(labels = scales::comma, breaks = seq(2e4,12e4,2e4), limits=c(2e4, 12e4))
p_fixed <- egg::set_panel_size(p2, width  = unit(15, "cm"), height = unit(15, "cm")) # Square
grid.newpage()
grid.draw(p_fixed)
df3 <- dat1[,c('date','GAAP', 'Operation')]
bars <- melt(df3, id.vars='date')
ggplot(bars, aes(fill=variable, y=value, x=date)) +
geom_bar(position="dodge", stat="identity") + scale_fill_manual(values=c(snap_green, snap_blue_med)) +
scale_x_date(date_breaks = '4 months', date_labels= "%b '%y", expand=c(3e-2, 3e-2)) +
scale_y_continuous(limits=c(0, 130e3), expand=c(0,0), breaks = seq(0,150e3, 30e3), labels = scales::comma) +
#theme(legend.title = element_blank(), panel.border = element_rect(colour = "black", fill=NA)) +
theme(legend.title = element_blank())
theme(axis.ticks.x = element_line(colour = "black", size = 1))
dat2 <- read.csv('~/Data/data2.csv')
dat2$date <- as.Date(dat2$Date, format='%m/%d/%Y')
df4 <- cbind.data.frame(dat2[,'date'],apply(dat2[,9:10], 2, function(x) as.numeric(sub('%','',x))))[1:17,]
colnames(df4) <- c('date', sub('.1','',colnames(df4)[-1]))
df4.melt <- melt(df4, id='date')
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(linetype=2))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(col='gray95'))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(color='gray95'))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(color='gray96'))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
library(ggplot2)
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() + scale_y_continuous(labels = scales::comma)
?aes
getwd()
setwd('..')
getwd()
setwd('/Work_Code')
setwd('/Work_Code/')
setwd('work_code/')
g + geom_smooth(method='lm')
library(ggplot2)
g <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() + scale_y_continuous(labels = scales::comma)
g
g + geom_smooth(method='lm')
g + geom_smooth(method='lm', se=TRUE)
g + geom_smooth(method='lm', se=TRUE) + xlim(c(0, 0.1)) + ylim(c(0, 1000000))
g + geom_smooth(method='lm', se=TRUE) + xlim(c(0, 0.1)) + ylim(c(0, 1000000))
g + geom_smooth(method='lm', se=TRUE) + xlim(c(0, 0.1)) + ylim(c(0, 1000000))
g1 <- g + geom_smooth(method='lm', se=TRUE) + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000))  # zooms in without deleting points
plot(g1)
g1 + labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# or
g1 + ggtitle("Area Vs Population", subtitle="From midwest dataset") + xlab("Area") + ylab("Population")
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(col="steelblue", size=3) +   # Set static color and size for points
geom_smooth(method="lm", col="firebrick") +  # change the color of line
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
plot(gg)
gg + scale_colour_brewer(palette = "Set1")
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01)) # Change breaks
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01),labels = letters[1:11]) +
scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
gg2
gg2 <- gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01),labels = letters[1:11]) +
scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
gg2
gg + theme_bw() + labs(subtitle="BW Theme")
gg + theme_classic() + labs(subtitle="Classic Theme")
library(ggplot2)
library(gtable)
library(grid)# low-level grid functions are required
x <- seq(1992, 2002, by=2)
d1 <- data.frame(x=x, y=rnorm(length(x)))
xy <- expand.grid(x=x, y=x)
d2 <- data.frame(x=xy$x, y=xy$y, z= jitter(xy$x + xy$y))
p1 <-  ggplot(data = d1, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity")
p2 <-  ggplot(data = d2, mapping = aes(x=x, y=y, fill=z)) +
geom_tile()
## convert plots to gtable objects
g1 <- ggplotGrob(p1)
g1 <- gtable_add_cols(g1, unit(0,"mm")) # add a column for missing legend
g2 <- ggplotGrob(p2)
g <- rbind(g1, g2, size="first") # stack the two plots
g$widths <- unit.pmax(g1$widths, g2$widths) # use the largest widths
# center the legend vertically
g$layout[grepl("guide", g$layout$name),c("t","b")] <- c(1,nrow(g))
grid.newpage()
grid.draw(g)
library(FinCal)
install.packages('FinCal')
library(FinCal)
library(reshape2)
dat <- get.ohlc.yahoo('AAPL', '2015-12-01', '2015-12-31')
library(ggplot2)
library(grid)
library(dplyr)
install.packages('dplyr')
library(grid)
library(dplyr)
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
detach("package:dplyr", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grid", unload = TRUE)
detach("package:gtable", unload = TRUE)
detach("package:methods", unload = TRUE)
detach("package:reshape2", unload = TRUE)
detach("package:utils", unload = TRUE)
library(ggplot2)
library(grid)
library(dplyr)
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
ymd
hours
seq("2010-07-01",by=1, length=8761)
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = seq(from="2010-07-01",by=1, length=8761) , series1 = rnorm(8761), series2 = rnorm(8761, 100))
seq(from=as.Date("2010-07-01"),by=1, length=8761)
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = seq(from=as.Date("2010-07-01"),by=1, length=8761) , series1 = rnorm(8761), series2 = rnorm(8761, 100))
df
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = seq(from=as.Date("2010-07-01"),by=1, length=8761) , series1 = rnorm(8761), series2 = rnorm(8761, 100))
#' Create the two plots.
plot1 <- df %>%
select(DateTime, series1) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series1), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot2 <- df %>%
select(DateTime, series2) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series2), size = 0.5, alpha = 0.75) +
ylab("Blue drops / L") +
theme_minimal() +
theme(axis.title.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(plot1), ggplotGrob(plot2), size = "last"))
library(grid)
g2 <- ggplot(d2, aes(x=date, y=value, colour=variable)) + geom_line(na.rm=TRUE, size=1.5, alpha=0.85) + theme_bw() +
scale_x_date(date_breaks='2 months', date_labels="%b '%y", limits=date.range) +
ylab('Days') + theme(legend.title = element_blank()) +
scale_color_manual(values=c(snap_green, snap_orange))
labs <- c('Original Payment Schedule', 'Adjusted Schedule', 'Customer Payment')
dat <- data[[1]]
d1 <- melt(dat[,1:4], 'date')
d2 <- melt(dat[,c(1,5:6)], 'date')
date.range <- dat[c(1,nrow(dat)),1]
data <- lapply(1:5, function(x) as.data.frame(read_excel('To plot 2.xlsx', sheet=x)))
library(shiny); runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
?updateSelectInput
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
?observeEvent
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
?observeEvent
?reactiveValues
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod_works.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod_works.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod_works.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod_works.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
