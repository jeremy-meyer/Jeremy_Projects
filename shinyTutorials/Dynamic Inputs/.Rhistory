require(ggplot2)
first1000 <- ifelse(is.null(input$headonly), FALSE, input$headonly)
dat.to.plot <- datasetInput()[1:ifelse(first1000, 1000, nrows()),1]
qplot(unlist(dat.to.plot), geom='histogram', xlab=colnames(datasetInput())[1], bins=14)
})
}
shinyApp(ui, server)
ui <- fluidPage(
actionButton("add", "Add UI")
)
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
shinyApp(ui, server)
ui <- fluidPage(
actionButton("add", "Add UI"),
actionButton('rem', 'Remove UI')
)
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
shinyApp(ui, server)
?removeUI
ui <- fluidPage(
actionButton("add", "Add UI"),
actionButton('rem', 'Remove UI')
textInput("txt", "This is no longer useful")
)
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
observeEvent(input$rem, {
removeUI( selector = "div:has(> #txt)")
})
}
shinyApp(ui, server)
ui <- fluidPage(
actionButton("add", "Add UI"),
actionButton('rem', 'Remove UI'),
textInput("txt", "This is no longer useful")
)
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
observeEvent(input$rem, {
removeUI( selector = "div:has(> #txt)")
})
}
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(datasets)
ui <- fluidPage(
titlePanel('Double event subscription'),
sidebarLayout(
sidebarPanel(
selectInput('data', 'Choose a dataset', c('rock', 'pressure', 'cars')),
radioButtons('tool', 'Choose a tool', c('summary', 'plot', 'head')),
actionButton('add', 'Add result')
),
mainPanel(
div(id = 'placeholder')
)
)
)
server <- function(input, output, session) {
dataset <- reactive({ switch(input$data,
'rock' = rock, 'pressure' = pressure, 'cars' = cars)
})
observeEvent(input$add, {
id <- paste0(input$tool, input$add)
rmvid <- paste0('rmv', id)
insertUI('#placeholder',
ui = div(id = paste0('div', id),
style = 'border: 2px solid #191919; border-radius: 5px;
background: #CCCCCC; margin: 15px;',
actionButton(rmvid, 'X', style = 'background: #ff6666; color: #fff'),
switch(input$tool,
'summary' = verbatimTextOutput(id),
'plot' = plotOutput(id),
'head' = tableOutput(id))
)
)
output[[id]] <-
if (input$tool == 'summary') renderPrint({ summary(isolate(dataset())) })
else if (input$tool == 'plot') renderPlot({ plot(isolate(dataset())) })
else if (input$tool == 'head') renderTable({ head(isolate(dataset())) })
observeEvent(input[[rmvid]], {
removeUI(selector = paste0('#div', id))
}, ignoreInit = TRUE, once = TRUE)
})
}
shinyApp(ui, server)
runApp('shinyTutorials/Modules/apply_fun.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
?validate
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
?req
runApp('Dynamic Inputs/test2.R')
shinyjs::enable
?shinyjs::enable
runApp('Dynamic Inputs/test2.R')
rm(list=ls())
runApp('Dynamic Inputs/test2.R')
library(shiny) # shiny_1.0.0
library(DT) # DT_0.2
testModuleUI <- function(id) {
ns = NS(id)
tagList(
br(),
sidebarPanel(width = 12, id = "inputBar",
fluidRow(
column(width = 2, checkboxInput(ns("buttonA"), label = "Button A", value = F)),
column(width = 2, uiOutput(ns("getButtonB")))
),
dataTableOutput(outputId = ns("tableOutput"))
)
)
}
testModule <- function(input, output, session, showB = F ){
ns = session$ns
output$getButtonB <- renderUI({
if( showB ){
print("call checkboxInput")
checkboxInput(ns("buttonB"), label = "Button B", value = F)
}else{
NULL
}
})
getTable <- reactive({
print("inside getTable")
out = c()
if( input$buttonA ) {
out = paste0(out, "A")
}
if( input$buttonB ){
out = paste0(out, "B")
}
data.frame(var = out)
})
output$tableOutput <- renderDataTable({
print("call getTable")
datatable( getTable() )
})
}
server <- function(input, output, session) {
callModule( module = testModule, id = "test1", showB = T )
session$onSessionEnded( stopApp )
}
ui <- pageWithSidebar(
headerPanel( title = "Test app" ),
sidebarPanel(
width = 3,
selectInput(inputId = "whatever", label = "This button doesn't matter", choices = c("A", "B"))
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1", testModuleUI("test1"))
)
)
)
shinyApp( ui = ui, server = server, options = list(launch.browser = T)
library(shiny) # shiny_1.0.0
library(DT) # DT_0.2
testModuleUI <- function(id) {
ns = NS(id)
tagList(
br(),
sidebarPanel(width = 12, id = "inputBar",
fluidRow(
column(width = 2, checkboxInput(ns("buttonA"), label = "Button A", value = F)),
column(width = 2, uiOutput(ns("getButtonB")))
),
dataTableOutput(outputId = ns("tableOutput"))
)
)
}
testModule <- function(input, output, session, showB = F ){
ns = session$ns
output$getButtonB <- renderUI({
if( showB ){
print("call checkboxInput")
checkboxInput(ns("buttonB"), label = "Button B", value = F)
}else{
NULL
}
})
getTable <- reactive({
print("inside getTable")
out = c()
if( input$buttonA ) {
out = paste0(out, "A")
}
if( input$buttonB ){
out = paste0(out, "B")
}
data.frame(var = out)
})
output$tableOutput <- renderDataTable({
print("call getTable")
datatable( getTable() )
})
}
server <- function(input, output, session) {
callModule( module = testModule, id = "test1", showB = T )
session$onSessionEnded( stopApp )
}
ui <- pageWithSidebar(
headerPanel( title = "Test app" ),
sidebarPanel(
width = 3,
selectInput(inputId = "whatever", label = "This button doesn't matter", choices = c("A", "B"))
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1", testModuleUI("test1"))
)
)
)
shinyApp( ui = ui, server = server, options = list(launch.browser = T)
)
require(shiny)
require(shinyIncubator)
shinyUI(pageWithSidebar(
headerPanel("Test"),
sidebarPanel(
selectInput("options", "options", choices=c('abc','def')),
uiOutput("test"),
actionButton("add","Add")
),
mainPanel(
textOutput("caption")
)
))
shinyServer(function(input, output) {
output$test <- renderUI({
VALUE <- ''
if(input$add>0) {
isolate({
VALUE <- input$options
})
}
textInput("textbox","Text",VALUE)
})
output$caption <- renderText({
input$textbox
})
})
require(shiny)
require(shinyIncubator)
shinyApp(
shinyUI(pageWithSidebar(
headerPanel("Test"),
sidebarPanel(
selectInput("options", "options", choices=c('abc','def')),
uiOutput("test"),
actionButton("add","Add")
),
mainPanel(
textOutput("caption")
)
)),
shinyServer(function(input, output) {
output$test <- renderUI({
VALUE <- ''
if(input$add>0) {
isolate({
VALUE <- input$options
})
}
textInput("textbox","Text",VALUE)
})
output$caption <- renderText({
input$textbox
})
})
)
require(shiny)
require(shinyIncubator)
shinyApp(
shinyUI(pageWithSidebar(
headerPanel("Test"),
sidebarPanel(
selectInput("options", "options", choices=c('abc','def')),
uiOutput("test"),
actionButton("add","Add")
),
mainPanel(
textOutput("caption")
)
)),
shinyServer(function(input, output, session) {
observe({
VALUE <- ''
if(input$add>0) {
isolate({
VALUE <- input$options
})
}
updateTextInput(session, inputId = "textbox", value = VALUE)
})
output$caption <- renderText({
input$textbox
})
}))
require(shiny)
require(shinyIncubator)
shinyApp(
shinyUI(pageWithSidebar(
headerPanel("Test"),
sidebarPanel(
selectInput("options", "options", choices=c('abc','def')),
textInput("textbox", "Text", ""),
actionButton("add","Add")
),
mainPanel(
textOutput("caption")
)
)),
shinyServer(function(input, output, session) {
observe({
VALUE <- ''
if(input$add>0) {
isolate({
VALUE <- input$options
})
}
updateTextInput(session, inputId = "textbox", value = VALUE)
})
output$caption <- renderText({
input$textbox
})
}))
runApp('Dynamic Inputs/test2.R')
library(shiny)
library(shinydashboard)
library(ggplot2)
datasets <- function() {
tmp <-  unlist(
sapply(ls("package:datasets"), function(x){
"data.frame" %in% class(get(x))
})
)
names(tmp[tmp])
}
apply.funUI <- function(id){
ns <- NS(id)
box(title='Module: Transform data', solidHeader=TRUE, background='green',
radioButtons(ns('fun'), label='Select a Function', choices=c('x','log(x)', 'abs(x)', 'sqrt(x)')))
}
show.dataUI <- function(id){
ns <- NS(id)
box(title='Module: Showing the data' , background='blue', plotOutput(ns('fun_dataH')), verbatimTextOutput(ns('fun_dataS')))
}
load.dataUI <-function(id){
ns <- NS(id)
box(title='Module: Load Data', solidHeader=TRUE, background='red',
selectInput(ns('dataset'), label='Select a Dataset', choices=datasets()),
selectInput(ns("SI_colname"), label = paste("Choose", "numeric variable"), choices = NULL))
}
apply.fun <- function(input, output, session, data=reactive(iris[,1])){
dat.new <- reactiveValues()
dat.new$fun <- reactive(input$fun)
dat.fun <- reactive({function(x) eval(parse(text=input$fun))})
dat.new$newDat <- reactive({dat.fun()(data())})
return(dat.new)
}
show.data <- function(input, output, session, dat.rvs){
output$fun_dataH <- renderPlot({
# ggplot(dat.rvs$newDat()) + geom_histogram(aes(y=..density..), bins=30, fill=I("blue"), col=I("red"), alpha=I(.3), bins=30)
qplot(dat.rvs$newDat(), geom='histogram', main=paste0('Transformed (', dat.rvs$fun(), ') Data'),
fill=I("blue"),
col=I("red"),
alpha=I(.3), bins=30)
})
output$fun_dataS <- renderPrint(summary(dat.rvs$newDat()))
}
load.data <- function(input, output, session){
d <- reactive({get(input$dataset)})
rvs <- reactiveValues()
cn <- reactive({
coln  <- colnames(d())
if(input$SI_colname == ''){
print('Null Value, updating selection!')
updateSelectInput(session, inputId = "SI_colname", choices = coln[sapply(d(), is.numeric)])
}
coln
})
observe({
print(paste('Using dataset', input$dataset))
# print(cn())
print(paste('Updating Selection...'))
updateSelectInput(session, inputId = "SI_colname", choices = cn()[sapply(d(), is.numeric)])
})
col.data <- reactive({
#print(isolate(input$SI_colname))
unlist(d()[,which(cn() == input$SI_colname)])
})
print(isolate(cn()[sapply(d(), is.numeric)]))
print(isolate(input$SI_colname))
return(col.data)
}
# Dashboard Page Has three parts, a header, sidebar and body. Using Iris dataset
ui <- dashboardPage(skin='blue',
dashboardHeader(title='Apply Function'),
dashboardSidebar(sidebarMenu(
menuItem("Tab1", tabName = "tab1", icon = icon("list")),
menuItem("Tab2", tabName = "tab2", icon = icon("box"))
)),
dashboardBody(tabItems(
tabItem(tabName = 'tab1',
fluidRow( load.dataUI('id3'),
apply.funUI('id1')
),
fluidRow(show.dataUI('id2')))
))
)
server <- function(input, output) {
data <- callModule(load.data, id='id3')
print('Final Data!')
print(isolate(data()))
data.fun <- callModule(apply.fun, id='id1', data=reactive(iris[,2]))
callModule(show.data, id='id2', data.fun)
}
shinyApp(ui, server)
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
?reactiveValues
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
class(reactive('iris'))
runApp('Dynamic Inputs/test2.R')
runApp('Dynamic Inputs/test2.R')
runApp('test2.R')
runApp('Dynamic Inputs/test2.R')
