scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(linetype=2))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(col='gray95'))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(color='gray95'))
# (Technically) Past due vs really (operational) past due
# Think orange vs red line
ggplot(df4.melt) +
geom_line(aes(x=date, y=value, colour=variable), size=2) +
scale_color_manual(values=c(snap_purple_med, snap_blue_light)) +
scale_x_date(date_breaks = '2 months', date_labels= "%b '%y") +
scale_y_continuous(limits=c(0, 100), expand=c(0,0), breaks=seq(0,100,20)) +
theme(legend.title = element_blank()) + ylab('Percent (%)') +
theme(panel.grid.minor = element_line(color='gray96'))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
library(ggplot2)
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() + scale_y_continuous(labels = scales::comma)
?aes
getwd()
setwd('..')
getwd()
setwd('/Work_Code')
setwd('/Work_Code/')
setwd('work_code/')
g + geom_smooth(method='lm')
library(ggplot2)
g <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() + scale_y_continuous(labels = scales::comma)
g
g + geom_smooth(method='lm')
g + geom_smooth(method='lm', se=TRUE)
g + geom_smooth(method='lm', se=TRUE) + xlim(c(0, 0.1)) + ylim(c(0, 1000000))
g + geom_smooth(method='lm', se=TRUE) + xlim(c(0, 0.1)) + ylim(c(0, 1000000))
g + geom_smooth(method='lm', se=TRUE) + xlim(c(0, 0.1)) + ylim(c(0, 1000000))
g1 <- g + geom_smooth(method='lm', se=TRUE) + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000))  # zooms in without deleting points
plot(g1)
g1 + labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# or
g1 + ggtitle("Area Vs Population", subtitle="From midwest dataset") + xlab("Area") + ylab("Population")
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(col="steelblue", size=3) +   # Set static color and size for points
geom_smooth(method="lm", col="firebrick") +  # change the color of line
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
plot(gg)
gg + scale_colour_brewer(palette = "Set1")
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01)) # Change breaks
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01),labels = letters[1:11]) +
scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
gg2
gg2 <- gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01),labels = letters[1:11]) +
scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
gg2
gg + theme_bw() + labs(subtitle="BW Theme")
gg + theme_classic() + labs(subtitle="Classic Theme")
library(ggplot2)
library(gtable)
library(grid)# low-level grid functions are required
x <- seq(1992, 2002, by=2)
d1 <- data.frame(x=x, y=rnorm(length(x)))
xy <- expand.grid(x=x, y=x)
d2 <- data.frame(x=xy$x, y=xy$y, z= jitter(xy$x + xy$y))
p1 <-  ggplot(data = d1, mapping = aes(x = x, y = y)) +
geom_line(stat = "identity")
p2 <-  ggplot(data = d2, mapping = aes(x=x, y=y, fill=z)) +
geom_tile()
## convert plots to gtable objects
g1 <- ggplotGrob(p1)
g1 <- gtable_add_cols(g1, unit(0,"mm")) # add a column for missing legend
g2 <- ggplotGrob(p2)
g <- rbind(g1, g2, size="first") # stack the two plots
g$widths <- unit.pmax(g1$widths, g2$widths) # use the largest widths
# center the legend vertically
g$layout[grepl("guide", g$layout$name),c("t","b")] <- c(1,nrow(g))
grid.newpage()
grid.draw(g)
library(FinCal)
install.packages('FinCal')
library(FinCal)
library(reshape2)
dat <- get.ohlc.yahoo('AAPL', '2015-12-01', '2015-12-31')
library(ggplot2)
library(grid)
library(dplyr)
install.packages('dplyr')
library(grid)
library(dplyr)
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
detach("package:dplyr", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grid", unload = TRUE)
detach("package:gtable", unload = TRUE)
detach("package:methods", unload = TRUE)
detach("package:reshape2", unload = TRUE)
detach("package:utils", unload = TRUE)
library(ggplot2)
library(grid)
library(dplyr)
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
ymd
hours
seq("2010-07-01",by=1, length=8761)
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = seq(from="2010-07-01",by=1, length=8761) , series1 = rnorm(8761), series2 = rnorm(8761, 100))
seq(from=as.Date("2010-07-01"),by=1, length=8761)
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = seq(from=as.Date("2010-07-01"),by=1, length=8761) , series1 = rnorm(8761), series2 = rnorm(8761, 100))
df
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = seq(from=as.Date("2010-07-01"),by=1, length=8761) , series1 = rnorm(8761), series2 = rnorm(8761, 100))
#' Create the two plots.
plot1 <- df %>%
select(DateTime, series1) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series1), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot2 <- df %>%
select(DateTime, series2) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series2), size = 0.5, alpha = 0.75) +
ylab("Blue drops / L") +
theme_minimal() +
theme(axis.title.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(plot1), ggplotGrob(plot2), size = "last"))
library(grid)
g2 <- ggplot(d2, aes(x=date, y=value, colour=variable)) + geom_line(na.rm=TRUE, size=1.5, alpha=0.85) + theme_bw() +
scale_x_date(date_breaks='2 months', date_labels="%b '%y", limits=date.range) +
ylab('Days') + theme(legend.title = element_blank()) +
scale_color_manual(values=c(snap_green, snap_orange))
labs <- c('Original Payment Schedule', 'Adjusted Schedule', 'Customer Payment')
dat <- data[[1]]
d1 <- melt(dat[,1:4], 'date')
d2 <- melt(dat[,c(1,5:6)], 'date')
date.range <- dat[c(1,nrow(dat)),1]
data <- lapply(1:5, function(x) as.data.frame(read_excel('To plot 2.xlsx', sheet=x)))
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) # No scientific notation
data("midwest", package = "ggplot2")
theme_set(theme_bw())
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
g <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() + scale_y_continuous(labels = scales::comma)
g
g + geom_smooth(method='lm', se=TRUE) + xlim(c(0, 0.1)) + ylim(c(0, 1000000))
g1 <- g + geom_smooth(method='lm', se=TRUE) + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000))  # zooms in without deleting points
plot(g1)
g1 + labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# or
g1 + ggtitle("Area Vs Population", subtitle="From midwest dataset") + xlab("Area") + ylab("Population")
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(col="steelblue", size=3) +   # Set static color and size for points
geom_smooth(method="lm", col="firebrick") +  # change the color of line
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset",   y="Population", x="Area", caption="Midwest Demographics")
# + theme(legend.position="None")  # remove legend
plot(gg)
gg + scale_colour_brewer(palette = "Set1") # Can change entire clor set.
# There are lots of palettes online  (RColorBrewer package)
gg2 <- gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01),labels = letters[1:11]) +
scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
gg2
gg + theme_bw() + labs(subtitle="BW Theme")
gg + theme_classic() + labs(subtitle="Classic Theme")
options(scipen=999) # No scientific notation
data("midwest", package = "ggplot2")
# Add plot components --------------------------------
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=F) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Source: midwest")
options(scipen=999) # No scientific notation
data("midwest", package = "ggplot2")
# Add plot components --------------------------------
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=F) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Source: midwest")
plot(gg)
midwest
?theme
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=F) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Source: midwest")
gg + labs(color="State", size="Density")  # modify legend title
gg + scale_color_manual(name="State",
labels = c("Illinois",
"Indiana",
"Michigan",
"Ohio",
"Wisconsin"),
values = c("IL"="blue",
"IN"="red",
"MI"="green",
"OH"="brown",
"WI"="orange"))
# No legend --------------------------------------------------
gg + theme(legend.position="None") + labs(subtitle="No Legend")
# Legend to the left -----------------------------------------
gg + theme(legend.position="left") + labs(subtitle="Legend on the Left")
# legend at the bottom and horizontal ------------------------
gg + theme(legend.position="bottom", legend.box = "horizontal") + labs(subtitle="Legend at Bottom")
# legend at bottom-right, inside the plot --------------------
gg + theme(legend.title = element_text(size=12, color = "salmon", face="bold"),
legend.justification=c(1,0),
legend.position=c(0.95, 0.05),
legend.background = element_blank(),
legend.key = element_blank()) +
labs(subtitle="Legend: Bottom-Right Inside the Plot")
# legend at top-left, inside the plot -------------------------
gg + theme(legend.title = element_text(size=12, color = "salmon", face="bold"),
legend.justification=c(0,1),
legend.position=c(0.05, 0.95),
legend.background = element_blank(),
legend.key = element_blank()) +
labs(subtitle="Legend: Top-Left Inside the Plot")
gg + geom_text(aes(label=large_county), size=2, data=midwest_sub) + labs(subtitle="With ggplot2::geom_text") + theme(legend.position = "None")   # text
midwest_sub <- midwest[midwest$poptotal > 300000, ]
midwest_sub$large_county <- ifelse(midwest_sub$poptotal > 300000, midwest_sub$county, "")
gg + geom_text(aes(label=large_county), size=2, data=midwest_sub) + labs(subtitle="With ggplot2::geom_text") + theme(legend.position = "None")   # text
gg + geom_label(aes(label=large_county), size=2, data=midwest_sub, alpha=0.25) + labs(subtitle="With ggplot2::geom_label") + theme(legend.position = "None")  # label
# Plot text and label that REPELS eachother (using ggrepel pkg) ------------
library(ggrepel)
install.packages('ggrepel')
midwest_sub <- midwest[midwest$poptotal > 300000, ]
midwest_sub$large_county <- ifelse(midwest_sub$poptotal > 300000, midwest_sub$county, "")
gg + geom_text(aes(label=large_county), size=2, data=midwest_sub) + labs(subtitle="With ggplot2::geom_text") + theme(legend.position = "None")   # text
gg + geom_label(aes(label=large_county), size=2, data=midwest_sub, alpha=0.25) + labs(subtitle="With ggplot2::geom_label") + theme(legend.position = "None")  # label
# Plot text and label that REPELS eachother (using ggrepel pkg) ------------
library(ggrepel)
gg + geom_text_repel(aes(label=large_county), size=2, data=midwest_sub) + labs(subtitle="With ggrepel::geom_text_repel") + theme(legend.position = "None")   # text
gg + geom_label_repel(aes(label=large_county), size=2, data=midwest_sub) + labs(subtitle="With ggrepel::geom_label_repel") + theme(legend.position = "None")   # label
my_text <- "This text is at x=0.7 and y=0.8!"
my_grob = grid.text(my_text, x=0.7,  y=0.8, gp=gpar(col="firebrick", fontsize=14, fontface="bold"))
library(grid)
my_text <- "This text is at x=0.7 and y=0.8!"
my_grob = grid.text(my_text, x=0.7,  y=0.8, gp=gpar(col="firebrick", fontsize=14, fontface="bold"))
gg + annotation_custom(my_grob)
library(grid)
my_text <- "This text is at x=0.7 and y=0.8!"
my_grob = grid.text(my_text, x=0.7,  y=0.8, gp=gpar(col="firebrick", fontsize=14, fontface="bold"))
gg + annotation_custom(my_grob)
data(mpg, package="ggplot2")  # load data
# mpg <- read.csv("http://goo.gl/uEeRGu")  # alt data source
g <- ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point() +
labs(title="hwy vs displ", caption = "Source: mpg") +
geom_smooth(method="lm", se=FALSE) +
theme_bw()  # apply bw theme
plot(g)
data(mpg, package="ggplot2")  # load data
g <- ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point() +
labs(title="hwy vs displ", caption = "Source: mpg") +
geom_smooth(method="lm", se=FALSE) +
theme_bw()  # apply bw theme
plot(g)
# Facet wrap with common scales
g + facet_wrap( ~ class, nrow=3) + labs(title="hwy vs displ", caption = "Source: mpg", subtitle="Ggplot2 - Faceting - Multiple plots in one figure")  # Shared scales
library(shiny); runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('dashMod_Mod.R')
runApp('dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
?need
?validate
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
?updateSelectInput
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod.R')
runApp('shinyTutorials/Dashboard/dashMod_Mod_works.R')
?apply_function
# Dashboard Page Has three parts, a header, sidebar and body
ui <- dashboardPage(
dashboardHeader(title='Apply Function', skin='black'),
dashboardSidebar(),
dashboardBody()
)
library(shiny)
library(shinydashboard)
# Dashboard Page Has three parts, a header, sidebar and body
ui <- dashboardPage(
dashboardHeader(title='Apply Function', skin='black'),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
# Dashboard Page Has three parts, a header, sidebar and body
ui <- dashboardPage(
dashboardHeader(title='Apply Function', skin='black'),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
# Dashboard Page Has three parts, a header, sidebar and body
ui <- dashboardPage(
dashboardHeader(title='Apply Function', skin='black'),
dashboardSidebar(),
dashboardBody()
)
# Dashboard Page Has three parts, a header, sidebar and body
ui <- dashboardPage(
dashboardHeader(title='Apply Function', theme='black'),
dashboardSidebar(),
dashboardBody()
)
# Dashboard Page Has three parts, a header, sidebar and body
ui <- dashboardPage(skin='black',
dashboardHeader(title='Apply Function'),
dashboardSidebar(),
dashboardBody()
)
library(shiny)
library(shinydashboard)
# Dashboard Page Has three parts, a header, sidebar and body
ui <- dashboardPage(skin='black',
dashboardHeader(title='Apply Function'),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
# Dashboard Page Has three parts, a header, sidebar and body. Using Iris dataset
ui <- dashboardPage(skin='black',
dashboardHeader(title='Apply Function'),
dashboardSidebar(sidebarMenu(
menuItem("tab1", tabName = "Tab1", icon = icon("list")),
menuItem("tab2", tabName = "tab2", icon = icon("box"))
)),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
?box
library(shiny)
library(shinydashboard)
# Dashboard Page Has three parts, a header, sidebar and body. Using Iris dataset
ui <- dashboardPage(skin='black',
dashboardHeader(title='Apply Function'),
dashboardSidebar(sidebarMenu(
menuItem("tab1", tabName = "Tab1", icon = icon("list")),
menuItem("tab2", tabName = "Tab2", icon = icon("box"))
)),
dashboardBody(tabItems(
tabItem(tabName = 'dashboard',
fluidRow(box(title='Mod: Apply Fun'), solidHeader=TRUE)
)
))
)
server <- function(input, output) { }
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
# Dashboard Page Has three parts, a header, sidebar and body. Using Iris dataset
ui <- dashboardPage(skin='black',
dashboardHeader(title='Apply Function'),
dashboardSidebar(sidebarMenu(
menuItem("tab1", tabName = "Tab1", icon = icon("list")),
menuItem("tab2", tabName = "Tab2", icon = icon("box"))
)),
dashboardBody(tabItems(
tabItem(tabName = 'tab1',
fluidRow(box(title='Mod: Apply Fun'), solidHeader=TRUE)
)
))
)
server <- function(input, output) { }
shinyApp(ui, server)
runApp('shinyTutorials/Modules/apply_fun.R')
runApp('shinyTutorials/Modules/apply_fun.R')
runApp('shinyTutorials/Modules/apply_fun.R')
runApp('shinyTutorials/Modules/apply_fun.R')
runApp('shinyTutorials/Modules/apply_fun.R')
iris3
iris
iris[,1]
test <- 'log(x)'
|x|
x
match('log(x)' list(function(x) log(x), function(x) sqrt(x))
match('log(x)' list(function(x) log(x), function(x) sqrt(x)))
match('log(x)', list(function(x) log(x), function(x) sqrt(x)))
match('log(x)', c(function(x) log(x), function(x) sqrt(x)))
c(function(X) log(x))
body(test)
body(test)(4)
function(X) body(test)
function(X) test
test
f <- function(X) body('log(x)')
f
f(10)
f <- function(X) as.function('log(x)')
f(10)
as.function('log(x)')
as.function('log')
as.function
?as.function
function(x) `log(x)`
f <- function(x) `log(x)`
f
f(10)
f <- function(x) `"log(x)"`
f(10)
?parse
parse(test)
test
eval(test)
eval(test)(10)
?eval
?function
eval(parse(text="5+5"))
eval(parse(text="log(x)"))
f <- function(x) eval(parse(text="log(x)"))
f(10)
log(10)
parse('log(x)')
runApp('shinyTutorials/Modules/apply_fun.R')
runApp('shinyTutorials/Modules/apply_fun.R')
runApp('apply_fun.R')
runApp('shinyTutorials/Modules/apply_fun.R')
runApp('apply_fun.R')
runApp('shinyTutorials/Modules/apply_fun.R')
runApp('shinyTutorials/Modules/apply_fun.R')
runApp('shinyTutorials/Modules/apply_fun.R')
runApp('apply_fun.R')
runApp('shinyTutorials/Modules/apply_fun.R')
